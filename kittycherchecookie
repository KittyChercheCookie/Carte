<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover">
  <title>Carte KittyChercheCookie</title>

  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <!-- Material Symbols (apartment) -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200&icon_names=apartment" />

  <style>
    :root{
      --panel-width:380px;
      --brand:#3c76d6;
      --brand-strong:#2f61b0;
      --muted:#6b7280;
      --bg:#ffffff;
      --star-gold:#F59E0B;
      --star-grey:#D1D5DB;
      --card-radius:12px;
      --popover-z:6000;
    }

    /* Global */
    *,*::before,*::after{ box-sizing:border-box; }
    html,body{
      height:100%; margin:0;
      font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;
      overflow-x:hidden;
      scroll-behavior:smooth;
    }

    /* Map full screen */
    #map{ position:fixed; inset:0; z-index:0; }

    /* Title (desktop) */
    .titlechip{
      position:absolute; z-index:1000; left:12px; top:12px;
      background:rgba(255,255,255,.95); padding:8px 12px; border-radius:10px;
      box-shadow:0 2px 10px rgba(0,0,0,.08); font-size:14px; font-weight:600;
      max-width:calc(100vw - 24px);
    }

    /* Left column (desktop) */
    #leftUI{
      position:absolute; left:12px; top:58px; width:300px;
      display:grid; gap:10px; z-index:1001; overflow:visible;
    }

    /* Cards */
    .card{
      width:100%; max-width:100%;
      background:var(--bg); border:1px solid #eee; border-radius:var(--card-radius);
      box-shadow:0 8px 24px rgba(0,0,0,.08);
      padding:12px; display:grid; gap:10px; position:relative;
      overflow:visible;
      z-index:1;
      transition:max-height .25s ease, opacity .2s ease, border-width .2s ease, padding .2s ease;
    }
    .card.raise{ z-index:calc(var(--popover-z) - 1); }
    .card.collapsed{ max-height:0!important; padding-top:0; padding-bottom:0; border-width:0; opacity:0; overflow:hidden; box-shadow:none; }
    .card:not(.collapsed) { overflow:visible !important; }

    /* CTA rows */
    .cta-row{ display:flex; gap:8px; flex-wrap:wrap; }
    .btn{
      flex:1 1 0; min-width:0; max-width:100%;
      border:0; background:var(--brand); color:#fff;
      padding:10px 12px; border-radius:8px; font-size:13px; cursor:pointer;
      text-decoration:none; text-align:center; white-space:normal; word-break:break-word; line-height:1.25;
    }
    .btn:hover{ background:var(--brand-strong); }
    .btn-outline{ background:#fff; border:1px solid #e5e7eb; color:#111827; }
    .btn-small{ font-size:12px; padding:8px 10px; }
    .btn-tab{ flex:1; border:1px solid #e5e7eb; background:#fff; color:#111827; }
    .btn-tab.active{ background:var(--brand); color:#fff; border-color:var(--brand); }

    /* Titles */
    #search.card h3, #filters.card h3{ margin:0 0 6px; font-size:14px; }

    /* Search card */
    .tokenbox{ position:relative; }
    .tokenlist{ display:flex; gap:6px; flex-wrap:wrap; margin-bottom:6px; }
    .token{
      background:#e8f0ff; color:var(--brand); border:1px solid #c7dcff; border-radius:999px; padding:4px 8px; font-size:12px;
      display:inline-flex; align-items:center; gap:6px;
    }
    .token .x{ cursor:pointer; }
    .ac-list{
      position:absolute; left:0; right:0; top:100%; z-index:5;
      background:#fff; border:1px solid #e5e7eb; border-radius:10px;
      box-shadow:0 8px 24px rgba(0,0,0,.18); max-height:240px; overflow:auto; display:none;
      -webkit-overflow-scrolling:touch;
    }
    .ac-item{ padding:8px 10px; cursor:pointer; }
    .ac-item:hover{ background:#f3f4f6; }
    #search input[type="text"]{
      width:100%; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px; font-size:14px; background:#fff;
    }
    .token-actions{ display:flex; justify-content:flex-end; margin-top:8px; }
    .btn-clear{
      background:#f3f4f6; color:#111827; border:1px solid #e5e7eb;
      padding:6px 8px; border-radius:8px; font-size:12px; cursor:pointer;
    }
    .btn-clear:hover{ background:#e5e7eb; }

    /* Filters card */
    #filters{ position:relative; z-index:1; overflow:visible; }
    #filters .row{ display:grid; gap:6px; }
    #filters input[type="text"]{ width:100%; padding:8px 10px; border:1px solid #e5e7eb; border-radius:8px; font-size:14px; }

    /* Filters body */
    #filters-body{ position:relative; display:grid; gap:12px; overflow:visible !important; }

    /* Sliders */
    .sliderrow{ display:grid; gap:6px; }
    .sliderwrap{ display:grid; grid-template-columns:1fr auto; gap:10px; align-items:center; }
    input[type="range"]{
      width:100%; height:6px; background:linear-gradient(var(--brand),var(--brand)) no-repeat #e5e7eb;
      background-size:0% 100%; border-radius:999px; outline:none;
    }
    input[type="range"]::-webkit-slider-runnable-track{ height:6px; background:transparent; border-radius:999px; }
    input[type="range"]::-moz-range-track{ height:6px; background:#e5e7eb; border-radius:999px; }
    input[type="range"]::-webkit-slider-thumb{
      -webkit-appearance:none; appearance:none; width:18px; height:18px; border-radius:50%;
      background:var(--brand); border:2px solid #fff; box-shadow:0 0 0 2px var(--brand); margin-top:-6px;
    }
    input[type="range"]::-moz-range-thumb{
      width:18px; height:18px; border-radius:50%; background:var(--brand); border:2px solid #fff; box-shadow:0 0 0 2px var(--brand);
    }
    input[type="range"]::-moz-range-progress{ background-color:var(--brand); height:6px; border-radius:999px; }

    /* Multi-selects */
    .multiselect{ position:relative; overflow:visible; }
    .ms-trigger{
      display:flex; justify-content:space-between; align-items:center; border:1px solid #e5e7eb; border-radius:8px; padding:8px 10px; cursor:pointer; background:#fff;
    }
    .ms-panel{
      position:absolute; left:0; right:0; top:calc(100% + 6px); z-index:1001;
      background:#fff; border:1px solid #e5e7eb; border-radius:10px; box-shadow:0 8px 24px rgba(0,0,0,.18);
      padding:8px; display:none; max-height:300px; overflow:auto; -webkit-overflow-scrolling:touch;
    }
    .multiselect.open { z-index: 1000; }
    .multiselect.open .ms-panel{ display:block; }
    .ms-head{ display:flex; justify-content:space-between; align-items:center; gap:8px; margin-bottom:6px; font-size:12px; color:var(--muted); }
    .ms-head .link{ color:var(--brand); cursor:pointer; }
    .ms-opt{ display:flex; align-items:center; gap:8px; padding:6px 4px; font-size:14px; }
    .ms-count{ color:var(--muted); font-size:12px; }

    /* Actions row */
    #filters .actions{ display:grid; grid-template-columns:1fr 1fr; gap:10px; align-items:stretch; margin-top:4px; }
    #filters .actions button{ border:0; background:var(--brand); color:#fff; padding:10px 12px; border-radius:8px; font-size:13px; cursor:pointer; }
    #filters .actions button:hover{ background:var(--brand-strong); }
    #filters .actions .reset{ background:#f3f4f6; color:#111827; }
    #filters .actions .reset:hover{ background:#e5e7eb; }

    /* Lock overlay — FULL SIZE of the filters card */
    #filters.locked #filters-body{ pointer-events:none; }
    #filters-overlay{
      display:none; position:absolute; inset:0;
      background:rgba(31,41,55,.12); z-index:9; border-radius:var(--card-radius);
      backdrop-filter:blur(1px); align-items:center; justify-content:center; text-align:center; padding:14px;
    }
    #filters.locked #filters-overlay{ display:flex; }
    .overlay-card{
      background:#fff; color:#111827; border-radius:10px; padding:10px 12px; box-shadow:0 6px 18px rgba(0,0,0,.12);
      font-size:14px; line-height:1.35; display:inline-flex; align-items:center; gap:8px;
    }

    /* Side panel (desktop right / mobile bottom sheet) */
    #panel{
      position:absolute; right:0; top:0; height:100%; width:var(--panel-width);
      background:#fff; box-shadow:-8px 0 24px rgba(0,0,0,.08);
      transform:translateX(100%); transition:transform .25s ease; z-index:1100; display:flex; flex-direction:column; pointer-events:none;
    }
    #panel.active{ transform:translateX(0); pointer-events:auto; }
    #panel header{ padding:16px 18px; border-bottom:1px solid #eee; display:flex; align-items:center; gap:10px; }
    #panel header h2{ margin:0; font-size:18px; line-height:1.2; }
    #panel header .close{ margin-left:auto; border:0; background:#f3f4f6; width:32px; height:32px; border-radius:8px; cursor:pointer; font-size:18px; }
    #panel .body{ padding:14px 18px; overflow-y:auto; -webkit-overflow-scrolling:touch; touch-action:pan-y; }

    .meta{ color:#6b7280; font-size:13px; display:grid; gap:4px; margin:6px 0 12px; }
    .pill{ display:inline-block; background:#f3f4f6; color:#3c76d6; font-size:12px; padding:4px 8px; border-radius:999px; margin-right:6px; }
    .section-title{ font-weight:600; margin:14px 0 8px; }

    /* Reviews block */
    .reviews{
      border:1px solid #eee; border-radius:10px; padding:10px; background:#fafafa;
      overflow:hidden; -webkit-overflow-scrolling:touch;
    }
    .review{
      padding:8px 0; border-bottom:1px dashed #e5e7eb;
      line-height:1.45; white-space:normal; word-break:break-word; overflow-wrap:anywhere;
    }
    .review:last-child{ border-bottom:0; }

    .dimmed{ opacity:.35; filter:grayscale(100%); }
    .leaflet-marker-icon.highlight{ filter:drop-shadow(0 0 8px var(--brand)) saturate(1.15); transform:translateY(-1px) scale(1.05); transition:filter .15s ease,transform .15s ease; }

    /* Utility */
    .muted{ color:var(--muted); }

    /* Material Symbols baseline + office icon styling */
    .material-symbols-outlined{
      font-variation-settings: 'FILL' 0, 'wght' 500, 'GRAD' 0, 'opsz' 28;
    }
    .office-icon{
      display:flex; align-items:center; justify-content:center;
      color:#000; font-size:28px;
    }

    /* Desktop-only */
    @media (min-width:769px){
      .titlechip{ display:block; }
      #leftUI{ display:grid; }
      .mobile-topbar{ display:none; }
      .reviews{ max-height:50vh; overflow:auto; }
    }

    /* Mobile layout */
    @media (max-width:768px){
      .titlechip{ display:none; }
      #cta-desktop{ display:none; }

      /* Prevent iOS auto-zoom on focus by using >=16px */
      #search input[type="text"],
      #filters input[type="text"],
      .ms-trigger{ font-size:16px; }

      #leftUI{
        left:8px; right:8px; width:auto;
        top:calc(100px + env(safe-area-inset-top, 0px));
        max-width:100%;
        overflow:visible;
      }

      .mobile-topbar{
        position:fixed; left:0; right:0; top:0; z-index:2000;
        padding:6px; padding-top:calc(6px + env(safe-area-inset-top, 0px));
        background:#fff; border-bottom:1px solid #eee; box-shadow:0 2px 10px rgba(0,0,0,.04);
        display:block; max-width:100vw;
      }

      .mobile-row{ display:grid; grid-template-columns:1fr 1fr; gap:6px; }
      #cta-mobile .btn{ font-size:12.5px; padding:9px 10px; min-width:0; max-width:100%; }

      .mobile-toggle-row{ margin-top:4px; display:grid; grid-template-columns:1fr 1fr; gap:6px; }
      .mobile-toggle-row .btn{ background:#fff; color:#111827; border:1px solid #e5e7eb; }
      .mobile-toggle-row .btn:hover{ background:#f8f8f8; }
      .mobile-toggle-row .btn.btn-small{ padding:8px 10px; font-size:12px; }

      #search.mobile-hidden, #filters.mobile-hidden{ display:none !important; }
      #filters{ transition:none; }

      /* Bottom-sheet panel: fixed height */
      #panel{
        position:fixed; left:0; right:0; bottom:0; top:auto; width:100%;
        height:35vh;
        transform:translateY(100%); box-shadow:0 -8px 24px rgba(0,0,0,.12);
        border-top-left-radius:14px; border-top-right-radius:14px;
      }
      #panel.active{ transform:translateY(0); }

      .reviews{ max-height:none; overflow:visible; }
    }
  </style>
</head>
<body>
  <div id="map"></div>

  <!-- Desktop title -->
  <div class="titlechip">Kitty Cherche Cookie hihihihihhiihihihi</div>

  <!-- Desktop left column -->
  <div id="leftUI">
    <div id="cta-desktop" class="card">
      <div class="cta-row">
        <a class="btn" target="_blank" rel="noopener"
           href="https://docs.google.com/forms/d/e/1FAIpQLScCMY-av6uPlNI6kqnJZi4hRwDdkeaNYb5-VruNraSp42rg0Q/viewform?usp=dialog">➕ Ajouter un restaurant</a>
        <a class="btn" target="_blank" rel="noopener"
           href="https://docs.google.com/forms/d/e/1FAIpQLSejL1sTKs7s9bwkUFkZKJCydxm9GNVkhaaxNB6CZo3Cu_kb1Q/viewform?usp=dialog">✍️ Laisser un avis</a>
      </div>
      <div class="cta-row">
        <button id="toggle-search-desktop"  class="btn btn-outline">Afficher la recherche ▾</button>
        <button id="toggle-filters-desktop" class="btn btn-outline">Afficher les filtres ▾</button>
      </div>
    </div>

    <!-- Desktop SEARCH card (hidden by default) -->
    <div id="search" class="card collapsed mobile-hidden">
      <h3>Recherche</h3>
      <div class="tokenbox">
        <div id="tok-container" class="tokenlist"></div>
        <input id="f-search" type="text" placeholder="Rechercher ou sélectionner un resto…" autocomplete="off" />
        <div id="ac" class="ac-list"></div>
        <div class="token-actions"><button id="clear-tokens" class="btn-clear" style="display:none;">Désélectionner tout</button></div>
      </div>
    </div>

    <!-- Desktop FILTERS card (hidden by default) -->
    <div id="filters" class="card collapsed mobile-hidden">
      <h3>Filtres</h3>

      <!-- FULL-CARD Lock overlay -->
      <div id="filters-overlay" aria-hidden="true">
        <div class="overlay-card"><span aria-hidden="true">🔒</span><span>Filtres désactivés pendant une sélection précise.<br/>Retirez la sélection pour réactiver les filtres.</span></div>
      </div>

      <div id="filters-body">
        <!-- Rating -->
        <div class="row sliderrow">
          <label id="lbl-rating" for="f-rating">Note minimale</label>
          <div class="sliderwrap">
            <input id="f-rating" type="range" min="0" max="10" step="0.5" value="0" />
            <div><span id="f-rating-val">≥ 0</span> ★</div>
          </div>
        </div>


        <!-- Price -->
        <div class="row" style="grid-column:1 / -1;">
          <div class="multiselect" id="ms-price">
            <div class="ms-trigger" data-label="Prix 💶">
              <span id="ms-price-label">Prix 💶</span>
              <span class="ms-count" id="ms-price-count"></span>
            </div>
            <div class="ms-panel" id="ms-price-panel">
              <div class="ms-head">
                <span>Prix 💶</span>
                <span><span class="link" id="price-select-all">Tout</span> · <span class="link" id="price-select-none">Aucun</span></span>
              </div>
            </div>
          </div>
        </div>

        <!-- Food -->
        <div class="row" style="grid-column:1 / -1;">
          <div class="multiselect" id="ms-food">
            <div class="ms-trigger" data-label="Type de restaurant 🍽️">
              <span id="ms-food-label">Type de restaurant 🍽️</span>
              <span class="ms-count" id="ms-food-count"></span>
            </div>
            <div class="ms-panel" id="ms-food-panel">
              <div class="ms-head">
                <span>Type de restaurant 🍽️</span>
                <span><span class="link" id="food-select-all">Tout</span> · <span class="link" id="food-select-none">Aucun</span></span>
              </div>
            </div>
          </div>
        </div>

        <div class="actions" style="grid-column:1 / -1;">
          <button id="f-zoom">Zoom sur les résultats</button>
          <button id="f-reset" class="reset">Réinitialiser</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Mobile top bar -->
  <div class="mobile-topbar">
    <div id="cta-mobile" class="mobile-row">
      <a class="btn" target="_blank" rel="noopener"
         href="https://docs.google.com/forms/d/e/1FAIpQLScCMY-av6uPlNI6kqnJZi4hRwDdkeaNYb5-VruNraSp42rg0Q/viewform?usp=dialog">➕ Ajouter un restaurant</a>
      <a class="btn" target="_blank" rel="noopener"
         href="https://docs.google.com/forms/d/e/1FAIpQLSejL1sTKs7s9bwkUFkZKJCydxm9GNVkhaaxNB6CZo3Cu_kb1Q/viewform?usp=dialog">✍️ Laisser un avis</a>
    </div>
    <div class="mobile-toggle-row">
      <button id="toggle-search-mobile"  class="btn btn-outline btn-small">Afficher la recherche ▾</button>
      <button id="toggle-filters-mobile" class="btn btn-outline btn-small">Afficher les filtres ▾</button>
    </div>
  </div>

  <!-- Details panel -->
  <aside id="panel">
    <header>
      <h2 id="p-title">Détails</h2>
      <button class="close" id="p-close" title="Fermer">×</button>
    </header>
    <div class="body">
      <div id="p-meta" class="meta"></div>
      <div id="p-pills"></div>
      <div class="section-title">Avis récents</div>
      <div id="p-reviews" class="reviews"></div>
    </div>
  </aside>

  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/papaparse@5.4.1/papaparse.min.js"></script>

  <script>
    // CSV
    const csvUrl = "https://docs.google.com/spreadsheets/d/e/2PACX-1vRE7LBwALNw3m9kW1XrGh5QnvFuMI2Z4TT8aAI8JA7v4S8WAb8BUVoKzCZSFMwLivFVBjsKjWZUVxPg/pub?gid=1935701035&single=true&output=csv";

    // Map
    const office = { lat: 48.8740172, lng: 2.3105188, name: "Kwerk Saint Honoré" };
    const defaultZoom = 15;
    const map = L.map('map', { zoomControl: false }).setView([office.lat, office.lng], defaultZoom);
    L.control.zoom({ position: 'bottomleft' }).addTo(map);
    L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', { attribution:'&copy; OpenStreetMap & CARTO', subdomains:'abcd', maxZoom:20 }).addTo(map);


    // Restaurant icon with rating-based color gradient (red->yellow->green)
    function makeRestIcon(avg){
      const num = Number(avg);
      const label = (Number.isFinite(num) && num > 0) ? num.toFixed(1) : 'n.a';
      let color = '#808080';
      if(Number.isFinite(num) && num > 0) {
        const normalized = Math.max(0, Math.min(5, num)) / 5;
        if(normalized <= 0.5) {
          const t = normalized * 2;
          const r = Math.round(204 + (247 - 204) * t);
          const g = Math.round(39 + (150 - 39) * t);
          const b = Math.round(97 + (70 - 97) * t);
          color = `rgb(${r},${g},${b})`;
        } else {
          const t = (normalized - 0.5) * 2;
          const r = Math.round(247 + (4 - 247) * t);
          const g = Math.round(150 + (132 - 150) * t);
          const b = Math.round(70 + (84 - 70) * t);
          color = `rgb(${r},${g},${b})`;
        }
      }
      const svg = `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 640">
  <path fill="${color}" d="M128 252.6C128 148.4 214 64 320 64C426 64 512 148.4 512 252.6C512 371.9 391.8 514.9 341.6 569.4C329.8 582.2 310.1 582.2 298.3 569.4C248.1 514.9 127.9 371.9 127.9 252.6z"/>
  <circle cx="320" cy="245" r="120" fill="white" opacity="0.97"/>
  <text x="320" y="282" text-anchor="middle"
        font-family="system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif"
        font-size="130" font-weight="400" fill="#000000">${label}</text>
</svg>`.trim();
      return L.icon({ iconUrl:'data:image/svg+xml;charset=UTF-8,'+encodeURIComponent(svg), iconSize:[36,50], iconAnchor:[18,48], popupAnchor:[0,-44] });
    }

    // ====== State ======
    const all = { data: [], markers: [] };
    let selectedMarker = null;

    // ====== Helpers ======
    const toNum = v => { const n=parseFloat(String(v).replace(',', '.')); return Number.isFinite(n)?n:null; };
    const norm  = s => String(s||'').toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g,'').trim();
    const keyOf = r => `${(r.restaurant_name||'').trim()} — ${(r.restaurant_adress||'').trim()}`;

    function avgStarsHtml(avg){
      const n=Number(avg);
      if(!Number.isFinite(n) || n<=0) return 'n.a';
      const k=Math.max(0,Math.min(5,Math.round(n)));
      const filled=`<span style="color:var(--star-gold)">★</span>`.repeat(k);
      const empty =`<span style="color:var(--star-grey)">★</span>`.repeat(5-k);
      const num=`<span class="muted">(${n.toFixed(1)}/5)</span>`;
      return filled+empty+' '+num;
    }

    function simplePopup(row){
      const name=row.restaurant_name||'';
      const addr=row.restaurant_adress||'';
      const avg=row.avg_rating;
      const cnt=row.reviews_count||0;
      const dist=row.distance_in_min?`${row.distance_in_min} min`:'';
      const rating=(Number(avg)>0)
        ? `${avgStarsHtml(avg)} <span class="muted">· ${cnt} avis</span>`
        : `<span class="muted">n.a · ${cnt} avis</span>`;
      return `<div style="min-width:220px"><b>${name}</b><br/>${addr}<br/>${rating}${dist?' · 🕒 '+dist:''}</div>`;
    }

    function renderReviews(htmlOrText){
      if(!htmlOrText) return '<div class="muted">Aucun avis pour le moment.</div>';
      const hasTag=/<\w+[^>]*>/.test(htmlOrText);
      if(hasTag) return htmlOrText;
      const safe=String(htmlOrText).replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
      return safe.split(/\n{2,}/).map(b=>`<div class="review">${b.replace(/\n/g,'<br/>')}</div>`).join('');
    }

    function updatePanel(row){
      document.getElementById('p-title').innerText=row.restaurant_name||'';
      const meta=[];
      if(row.restaurant_adress) meta.push(row.restaurant_adress);
      meta.push((Number(row.avg_rating)>0)
        ? `${avgStarsHtml(row.avg_rating)} · ${row.reviews_count||0} avis`
        : `n.a · ${row.reviews_count||0} avis`);
      if(row.distance_in_min) meta.push(`🕒 ${row.distance_in_min} min depuis le bureau`);
      document.getElementById('p-meta').innerHTML=meta.map(m=>`<div>${m}</div>`).join('');
      const pills=[];
      if(row.food_type) pills.push(`<span class="pill">${row.food_type}</span>`);
      if(row.price_range) pills.push(`<span class="pill">${row.price_range}</span>`);
      document.getElementById('p-pills').innerHTML=pills.join(' ');
      document.getElementById('p-reviews').innerHTML=renderReviews(row.reviews_html);
      document.getElementById('panel').classList.add('active');
      setTimeout(()=>map.invalidateSize(),60);
    }

    function clearSelection(){
      selectedMarker=null;
      all.markers.forEach(m=>m.marker.getElement()?.classList.remove('highlight'));
      document.getElementById('panel').classList.remove('active');
      map.closePopup();
      setTimeout(()=>map.invalidateSize(),60);
      closeAC(); // Only close autocomplete, NOT multiselects
    }
    document.getElementById('p-close').addEventListener('click', clearSelection);
    map.on('click', (e)=>{
      if(!e.originalEvent.target.closest('.leaflet-marker-icon') && !e.originalEvent.target.closest('.leaflet-popup')) clearSelection();
    });

    function enableHoverPinBehavior(marker,row=null){
      marker._pinned=false;
      marker.on('mouseover',function(){ if(!this._pinned) this.openPopup(); });
      marker.on('mouseout', function(){ if(!this._pinned) this.closePopup(); });
      marker.on('click',function(ev){
        const nowPinned=!this._pinned;
        all.markers.forEach(m=>{ m.marker._pinned=false; m.marker.getElement()?.classList.remove('highlight'); });
        if(nowPinned){ this._pinned=true; this.openPopup(); this.getElement()?.classList.add('highlight'); if(row) updatePanel(row); selectedMarker=this; }
        else clearSelection();
        ev.originalEvent?.stopPropagation?.();
      });
    }

    // ---------- UI refs ----------
    const filtersBox = document.getElementById('filters');
    const searchBox  = document.getElementById('search');

    const elSearch   = document.getElementById('f-search');
    const elTokBox   = document.getElementById('tok-container');
    const elAC       = document.getElementById('ac');

    const clearTokensBtn = document.getElementById('clear-tokens');

    const elRating    = document.getElementById('f-rating');
    const elRatingVal = document.getElementById('f-rating-val');

    const elRange     = document.getElementById('f-distance');
    const elRangeVal  = document.getElementById('f-distance-val');

    const msPrice         = document.getElementById('ms-price');
    const msPriceTrig     = msPrice.querySelector('.ms-trigger');
    const msPricePanel    = document.getElementById('ms-price-panel');
    const msPriceCount    = document.getElementById('ms-price-count');
    const priceSelectAll  = document.getElementById('price-select-all');
    const priceSelectNone = document.getElementById('price-select-none');

    const msFood         = document.getElementById('ms-food');
    const msFoodTrig     = msFood.querySelector('.ms-trigger');
    const msFoodPanel    = document.getElementById('ms-food-panel');
    const msFoodCount    = document.getElementById('ms-food-count');
    const foodSelectAll  = document.getElementById('food-select-all');
    const foodSelectNone = document.getElementById('food-select-none');

    const elZoomBtn  = document.getElementById('f-zoom');
    const elResetBtn = document.getElementById('f-reset');

    const toggleFiltersDesktopBtn = document.getElementById('toggle-filters-desktop');
    const toggleSearchDesktopBtn  = document.getElementById('toggle-search-desktop');

    // Mobile toggles
    const toggleSearchMobileBtn  = document.getElementById('toggle-search-mobile');
    const toggleFiltersMobileBtn = document.getElementById('toggle-filters-mobile');

    // Values
    let priceValues = [];
    let foodValues  = [];

    /* ===== Multiselect toggle (inline; no portal) ===== */
    let currentOpenMS = null; // HTMLElement of .multiselect
    function openMS(container){
      if(filtersBox.classList.contains('locked')) return;
      if(currentOpenMS && currentOpenMS !== container){
        currentOpenMS.classList.remove('open');
      }
      container.classList.add('open');
      filtersBox.classList.add('raise');
      currentOpenMS = container;
    }
    function closeMS(container){
      if(!container) return;
      container.classList.remove('open');
      if(currentOpenMS === container) currentOpenMS = null;
      if(!currentOpenMS) filtersBox.classList.remove('raise');
    }
    function toggleMS(container){
      if(filtersBox.classList.contains('locked')){ closeAllMS(); return; }
      if(container.classList.contains('open')) closeMS(container);
      else openMS(container);
    }
    function closeAllMS(){
      document.querySelectorAll('.multiselect.open').forEach(ms=>ms.classList.remove('open'));
      currentOpenMS = null;
      filtersBox.classList.remove('raise');
    }

    // Triggers
    msPriceTrig.addEventListener('click', (e)=>{ e.preventDefault(); e.stopPropagation(); toggleMS(msPrice); });
    msFoodTrig .addEventListener('click', (e)=>{ e.preventDefault(); e.stopPropagation(); toggleMS(msFood);  });

    // Click outside to close (mousedown intercept)
    document.addEventListener('mousedown', (e)=>{
      if(currentOpenMS && !currentOpenMS.contains(e.target)) closeAllMS();
    });

    // ESC to close
    window.addEventListener('keydown', (e)=>{ if(e.key==='Escape') closeAllPopovers(); });

    // Prevent bubbling inside panels
    function addPanelEventIsolation() {
      document.querySelectorAll('.ms-panel').forEach(panel => {
        panel.addEventListener('mousedown', e => e.stopPropagation());
        panel.addEventListener('click',     e => e.stopPropagation());
        panel.addEventListener('mouseup',   e => e.stopPropagation());
      });
    }

    /* ===== Autocomplete (inline; no portal) ===== */
    function openAC(){ elAC.style.display='block'; searchBox.classList.add('raise'); }
    function closeAC(){ elAC.style.display='none'; searchBox.classList.remove('raise'); }
    function updateACList(){
      const q=norm(elSearch.value);
      if(!q){ closeAC(); elAC.innerHTML=''; return; }
      const options=all.data
        .map(r=>({key:keyOf(r), hay:norm(keyOf(r))}))
        .filter(o=>o.hay.includes(q))
        .slice(0,20);
      if(!options.length){ closeAC(); elAC.innerHTML=''; return; }
      elAC.innerHTML=options.map(o=>`<div class="ac-item" data-key="${o.key}">${o.key}</div>`).join('');
      openAC();
    }
    elSearch.addEventListener('input', updateACList);
    elSearch.addEventListener('focus', updateACList);
    elSearch.addEventListener('blur', ()=>{ setTimeout(()=>closeAC(), 120); });
    document.addEventListener('click', (e)=>{ if(!elAC.contains(e.target) && e.target!==elSearch) closeAC(); });
    elAC.addEventListener('click',(e)=>{
      const it=e.target.closest('.ac-item'); if(!it) return;
      elSearch.value=it.dataset.key; closeAC(); applyFilters(true);
    });

    // Multi-select state
    const selectedPrices = new Set();
    const selectedFoods  = new Set();
    const selectedKeys   = new Set(); // kept for tokens UX

    function updateMSCount(countEl,selectedSet,values){
      if(selectedSet.size===0) countEl.textContent='';
      else if(selectedSet.size===values.length) countEl.textContent='(tous)';
      else countEl.textContent=`(${selectedSet.size})`;
    }
    function renderMS(panel, values, selectedSet, countEl){
      panel.querySelectorAll('.ms-opt').forEach(n=>n.remove());
      values.forEach(v=>{
        const id=`${panel.id}-${v}`;
        const row=document.createElement('label');
        row.className='ms-opt';
        row.innerHTML=`<input type="checkbox" id="${id}" ${selectedSet.has(v)?'checked':''}/> <span>${v}</span>`;
        panel.appendChild(row);
        const checkbox = row.querySelector('input');
        checkbox.addEventListener('change',(ev)=>{
          if(ev.target.checked) selectedSet.add(v); else selectedSet.delete(v);
          updateMSCount(countEl,selectedSet,values);
          resetSearchIfActive();
          applyFilters(true);
        });
        row.addEventListener('mousedown', (ev) => ev.stopPropagation());
        row.addEventListener('click',     (ev) => ev.stopPropagation());
        row.addEventListener('mouseup',   (ev) => ev.stopPropagation());
      });
      updateMSCount(countEl,selectedSet,values);
      addPanelEventIsolation();
    }

    // Slider UI
    function setRangeFill(rangeEl){
      const min=parseFloat(rangeEl.min||0), max=parseFloat(rangeEl.max||1), val=parseFloat(rangeEl.value||0);
      const pct=((val-min)/(max-min))*100; rangeEl.style.backgroundSize=pct+'% 100%';
    }
    function updateRatingLabel(){
      const v=parseFloat(elRating.value);
      elRatingVal.textContent='≥ '+(Number.isInteger(v)?v.toFixed(0):v.toFixed(1));
      setRangeFill(elRating);
    }
    function updateDistanceLabel(){
      const v=parseInt(elRange.value,10);
      elRangeVal.textContent = v === 30 ? '30 +' : '≤ '+v;
      setRangeFill(elRange);
    }
    elRating.addEventListener('input',()=>{ updateRatingLabel(); resetSearchIfActive(); applyFilters(false); });
    elRange .addEventListener('input',()=>{ updateDistanceLabel(); resetSearchIfActive(); applyFilters(false); });

    // Tokens (kept)
    function renderTokens(){
      elTokBox.innerHTML='';
      selectedKeys.forEach(k=>{
        const div=document.createElement('div');
        div.className='token';
        div.innerHTML=`<span>${k}</span> <span class="x" title="Retirer">×</span>`;
        div.querySelector('.x').addEventListener('click',()=>{
          selectedKeys.delete(k); renderTokens(); syncFiltersLock(); applyFilters(true);
        });
        div.addEventListener('mousedown', e=>e.preventDefault());
        elTokBox.appendChild(div);
      });
      clearTokensBtn.style.display = selectedKeys.size ? 'inline-block' : 'none';
    }

    function lockFilters(){ filtersBox.classList.add('locked'); /* Don't close multiselects when locking */ }
    function unlockFilters(){ filtersBox.classList.remove('locked'); }
    function syncFiltersLock(){ if(selectedKeys.size>0) lockFilters(); else unlockFilters(); }

    function resetFiltersToDefaultIfUsed(){
      let changed=false;
      if (parseFloat(elRating.value)!==0){ elRating.value=0; updateRatingLabel(); changed=true; }
      if (parseInt(elRange.value,10)!==30){ elRange.value=30; updateDistanceLabel(); changed=true; }
      if (selectedPrices.size){ selectedPrices.clear(); changed=true; }
      if (selectedFoods.size){ selectedFoods.clear(); changed=true; }
      if (changed){
        renderMS(msPricePanel,priceValues,selectedPrices,msPriceCount);
        renderMS(msFoodPanel, foodValues, selectedFoods, msFoodCount);
      }
      return changed;
    }
    function resetSearchIfActive(){
      let changed=false;
      if (selectedKeys.size){ selectedKeys.clear(); changed=true; }
      if (elSearch.value.trim()!==''){ elSearch.value=''; closeAC(); changed=true; }
      if (changed){ renderTokens(); unlockFilters(); }
      return changed;
    }

    /* === Safer "Tout/Aucun" using live arrays (no stale closures) === */
    // Avoid outside-close when clicking these links
    [priceSelectAll, priceSelectNone, foodSelectAll, foodSelectNone].forEach(el => {
      if(el){
        el.addEventListener('mousedown', e => e.stopPropagation());
        el.addEventListener('mouseup',   e => e.stopPropagation());
      }
    });

    function selectAll(which){
      return (e)=>{
        e.preventDefault(); e.stopPropagation();
        const values  = (which==='price') ? priceValues : foodValues;
        const set     = (which==='price') ? selectedPrices : selectedFoods;
        const panel   = (which==='price') ? msPricePanel  : msFoodPanel;
        const countEl = (which==='price') ? msPriceCount  : msFoodCount;

        set.clear();
        values.forEach(v => set.add(v));
        renderMS(panel, values, set, countEl);
        resetSearchIfActive();
        applyFilters(true);
      };
    }
    function selectNone(which){
      return (e)=>{
        e.preventDefault(); e.stopPropagation();
        const values  = (which==='price') ? priceValues : foodValues;
        const set     = (which==='price') ? selectedPrices : selectedFoods;
        const panel   = (which==='price') ? msPricePanel  : msFoodPanel;
        const countEl = (which==='price') ? msPriceCount  : msFoodCount;

        set.clear();
        renderMS(panel, values, set, countEl);
        resetSearchIfActive();
        applyFilters(true);
      };
    }

    priceSelectAll .addEventListener('click', selectAll('price'));
    priceSelectNone.addEventListener('click', selectNone('price'));
    foodSelectAll  .addEventListener('click', selectAll('food'));
    foodSelectNone .addEventListener('click', selectNone('food'));

    // Filtering
    function passFilters(row){
      if(selectedKeys.size){
        if(!selectedKeys.has(keyOf(row))) return false;
      } else {
        const q=norm(elSearch.value);
        if(q){
          const hay=norm((row.restaurant_name||'')+' '+(row.restaurant_adress||'')); if(!hay.includes(q)) return false;
        }
      }
      const minRating=parseFloat(elRating.value);
      const avg=Number(row.avg_rating);
      if(minRating>0){ if(!Number.isFinite(avg) || avg<minRating) return false; }
      const maxMin=parseInt(elRange.value,10);
      const d=parseInt(row.distance_in_min,10);
      if(isNaN(d)){ if(maxMin<30) return false; } else if(maxMin < 30 && d > maxMin) return false;
      if(selectedPrices.size && !selectedPrices.has(String(row.price_range||'').trim())) return false;
      if(selectedFoods.size  && !selectedFoods.has(String(row.food_type  ||'').trim())) return false;
      return true;
    }
    function applyFilters(resetSelection=false){
      if(resetSelection) clearSelection();
      all.markers.forEach(({marker,data})=>{
        const el=marker.getElement(); if(!el) return;
        if(passFilters(data)) el.classList.remove('dimmed'); else el.classList.add('dimmed');
      });
    }
    function fitToFiltered(){
      const bounds=L.latLngBounds(); let added=0;
      all.markers.forEach(({marker})=>{
        const el=marker.getElement();
        if(el && !el.classList.contains('dimmed')){ bounds.extend(marker.getLatLng()); added++; }
      });
      if(added>0) map.fitBounds(bounds.pad(0.1),{maxZoom:17});
    }

    // Reset & Zoom
    elResetBtn.addEventListener('click',()=>{
      elSearch.value=''; closeAC(); selectedKeys.clear(); renderTokens();
      elRating.value=0;  updateRatingLabel();
      elRange.value=30;  updateDistanceLabel();
      selectedPrices.clear(); selectedFoods.clear();
      renderMS(msPricePanel,priceValues,selectedPrices,msPriceCount);
      renderMS(msFoodPanel, foodValues, selectedFoods, msFoodCount);
      closeAllMS();
      unlockFilters(); applyFilters(true);
      map.setView([office.lat, office.lng], defaultZoom);
      setTimeout(()=>map.invalidateSize(),60);
    });
    elZoomBtn.addEventListener('click',()=>{ fitToFiltered(); });

    // Desktop visibility toggles
    function toggleFiltersDesktop(){
      const collapsed = filtersBox.classList.toggle('collapsed');
      if(collapsed) closeAllMS();
      toggleFiltersDesktopBtn.textContent = collapsed ? 'Afficher les filtres ▾' : 'Masquer les filtres ▴';
      setTimeout(()=>map.invalidateSize(),60);
    }
    function toggleSearchDesktop(){
      closeAC();
      const collapsed = searchBox.classList.toggle('collapsed');
      toggleSearchDesktopBtn.textContent = collapsed ? 'Afficher la recherche ▾' : 'Masquer la recherche ▴';
      setTimeout(()=>map.invalidateSize(),60);
    }
    toggleFiltersDesktopBtn?.addEventListener('click', toggleFiltersDesktop);
    toggleSearchDesktopBtn ?.addEventListener('click', toggleSearchDesktop);

    function syncDesktopToggleLabels(){
      toggleSearchDesktopBtn.textContent  = searchBox.classList.contains('collapsed')  ? 'Afficher la recherche ▾' : 'Masquer la recherche ▴';
      toggleFiltersDesktopBtn.textContent = filtersBox.classList.contains('collapsed') ? 'Afficher les filtres ▾'   : 'Masquer les filtres ▴';
    }

    // Mobile toggles
    function setToggleLabel(btn, isVisible, noun){
      btn.textContent = (isVisible ? 'Masquer ' : 'Afficher ') + noun + (isVisible ? ' ▴' : ' ▾');
    }
    function showSearchMobile(show){
      if(show) searchBox.classList.remove('collapsed');
      searchBox.classList.toggle('mobile-hidden', !show);
      if(!show) closeAC();
      setToggleLabel(toggleSearchMobileBtn, show, 'la recherche');
      setTimeout(()=>map.invalidateSize(),30);
    }
    function showFiltersMobile(show){
      if(show) filtersBox.classList.remove('collapsed');
      filtersBox.classList.toggle('mobile-hidden', !show);
      setToggleLabel(toggleFiltersMobileBtn, show, 'les filtres');
      setTimeout(()=>map.invalidateSize(),30);
    }
    function initMobileView(){
      if (window.matchMedia('(max-width: 768px)').matches){
        const searchVisible  = !searchBox.classList.contains('mobile-hidden');
        const filtersVisible = !filtersBox.classList.contains('mobile-hidden');
        setToggleLabel(toggleSearchMobileBtn,  searchVisible,  'la recherche');
        setToggleLabel(toggleFiltersMobileBtn, filtersVisible, 'les filtres');
      } else {
        searchBox.classList.remove('mobile-hidden');
        filtersBox.classList.remove('mobile-hidden');
        syncDesktopToggleLabels();
      }
    }
    toggleSearchMobileBtn?.addEventListener('click', ()=>{
      const nowVisible = searchBox.classList.contains('mobile-hidden');
      showSearchMobile(nowVisible);
    });
    toggleFiltersMobileBtn?.addEventListener('click', ()=>{
      const nowVisible = filtersBox.classList.contains('mobile-hidden');
      showFiltersMobile(nowVisible);
    });

    function closeAllPopovers(){ closeAC(); closeAllMS(); }

    // Resize -> close autocomplete and sync labels
    window.addEventListener('resize',()=>{ 
      closeAC();
      setTimeout(()=>{ initMobileView(); syncDesktopToggleLabels(); map.invalidateSize(); }, 60); 
    });

    // Data load
    Papa.parse(csvUrl,{
      download:true, header:true, skipEmptyLines:true,
      complete:function(results){
        const data=results.data||[]; all.data=data;

        const priceSet = new Set(data.map(r=>String(r.price_range||'').trim()).filter(Boolean));
        const foodSet  = new Set(data.map(r=>String(r.food_type||'').trim()).filter(Boolean));
        priceValues = Array.from(priceSet).sort((a,b)=>a.length-b.length||a.localeCompare(b));
        foodValues  = Array.from(foodSet).sort((a,b)=>a.localeCompare(b));

        renderMS(msPricePanel,priceValues,selectedPrices,msPriceCount);
        renderMS(msFoodPanel, foodValues, selectedFoods, msFoodCount);
        addPanelEventIsolation();

        data.forEach(row=>{
          const lat=toNum(row.lat), lng=toNum(row.long);
          if(lat==null || lng==null) return;
          const icon=makeRestIcon(Number(row.avg_rating));
          const marker=L.marker([lat,lng],{icon}).addTo(map).bindPopup(simplePopup(row));
          enableHoverPinBehavior(marker,row);
          all.markers.push({marker,data:row,key:keyOf(row)});
        });

        if(all.markers.length) map.fitBounds(bounds.pad(0.1),{maxZoom:17});
        else map.setView([office.lat, office.lng], defaultZoom);

        updateRatingLabel(); updateDistanceLabel(); applyFilters(false);
        syncDesktopToggleLabels();
        initMobileView();
        setTimeout(()=>map.invalidateSize(),60);
      },
      error:function(err){ console.error("Erreur de chargement du CSV:", err); }
    });
  </script>
</body>
</html>
